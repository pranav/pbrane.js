This is the overview file. it lays out the flow for pbrane.js.


to launch the use provides up to 4 functions, a CanvasId, and a World:

draw : World CanvasContex ->
    This function controls drawing to the given canvas, pulled from the canvas id
    for now the context is only 2d     


tick : World -> datum
    recreates the datum, which will then be drawn(?)

key : World KeyEventString KeyEvent -> World
    recreates the World on key event

mouse : World MouseEventString MouseEvent -> World
    recreates the World based on an key event code and the coord that it happend on




LOW LEVEL:


data:
    a PBrain is an class
        state is the current World
        id is the canvasId
        eventQ is an array as queue KeyEvent or of MouseEvents
        tick is the tick function
        onKey is the key function
        onMouse is the mouse function
        draw is the draw function
        inFocus is a boolean. is the canvas in focus?

A MouseEvent is a class with a type, id, x, y

A Key Event is a class with a type and an id
        


launch : World, CanvasId, draw, tick = null, key = null, mouse = null ->

launches PBrain

addKeyEventListener : PBrain ->
    lauches a key event listener that adds key event to that PBrains queue
addMouseEventListener : PBrain ->
    lauches a mouse event listener that adds key event to that PBrains queue


runThrough : PBrain ->
    Deals with a tick, the possibilty of keyevents and mouse events, and drawing

tick : PBrain ->
    ticks that brain
draw : PBrain ->
    draws the brane
handleEvents : PBrain ->
    handles all events in that brain, clears the que

